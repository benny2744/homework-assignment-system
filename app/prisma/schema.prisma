
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/homework_assignment_system/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Teacher {
  id                   String   @id @default(cuid())
  username            String   @unique @db.VarChar(50)
  password_hash       String   @db.VarChar(255)
  created_at          DateTime @default(now())
  last_login          DateTime?
  failed_attempts     Int      @default(0)
  locked_until        DateTime?
  active_sessions_count Int    @default(0)
  
  assignments Assignment[]
  @@map("teachers")
}

model Assignment {
  id               String   @id @default(cuid())
  teacher_id       String
  title           String   @db.VarChar(100)
  content         String   @db.Text
  instructions    String?  @db.Text
  assignment_code String   @unique @db.VarChar(6)
  status          String   @default("draft") @db.VarChar(20) // draft, active, closed
  deadline        DateTime?
  created_at      DateTime @default(now())
  activated_at    DateTime?
  closed_at       DateTime?
  student_count   Int      @default(0)
  max_students    Int      @default(30)
  
  teacher         Teacher         @relation(fields: [teacher_id], references: [id])
  student_work    StudentWork[]
  
  @@map("assignments")
}

model StudentWork {
  id               String   @id @default(cuid())
  assignment_id    String
  student_name     String   @db.VarChar(50)
  content          String   @db.Text @default("")
  word_count       Int      @default(0)
  status           String   @default("draft") @db.VarChar(20) // draft, submitted
  created_at       DateTime @default(now())
  last_saved_at    DateTime @default(now())
  submitted_at     DateTime?
  auto_save_count  Int      @default(0)
  
  assignment       Assignment @relation(fields: [assignment_id], references: [id])
  
  @@unique([assignment_id, student_name])
  @@map("student_work")
}

model SystemLog {
  id           String   @id @default(cuid())
  event_type   String   @db.VarChar(50) // login_attempt, capacity_limit, copy_attempt
  user_id      String?
  assignment_id String?
  student_name String?
  ip_address   String?
  user_agent   String?
  details      String?  @db.Text
  created_at   DateTime @default(now())
  
  @@map("system_logs")
}
